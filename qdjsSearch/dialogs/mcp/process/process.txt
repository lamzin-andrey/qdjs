Чтобы не было проблем, принял команду и тут же стер её из файла.	*
Данные из файла пишем в объект.
Если пришла новая, создаем новый объект.
Операции по объектам есть смысл проводить, давая слово им по очереди (вдруг второй объект содержит данные малых файлов).
Проводник не пишет в файл, если он не пуст.							*

Первая строка - команда cp или mv (rm?), вторая строка - каталог, куда копируем, остальные - файлы, которые копируем.

Следить, чтобы не копировал сам в себя!

Что такое большой файл (который надо мониторить по байтам для прогрессбара)?
   - Берем 1Мб как маленький. Всё что больше мониторим, если скопировался быстрее чем за секунду, значит повышаем планку 1Мб.


1 Добиться, чтобы у диалога не было кнопки закрыть в окне.							*
	Добились. Однако, перезапуск всё-таки нужен в procManager Проводника для этого перца. (!)
2 Как CapsLockState сразу делается скрытым? Посмотреть в справку, при необходимости дополнить.	*


3 Будут классы. По экземпляру на каждый message из файла. 
	Кажому из них "дают слово", и каждый либо копирует, либо совершает другое действие из процесса копирования.
4 Действия процесса копирования.
 4.1 Попробуем без cp -r. То есть если в списке есть каталог, создаём такой же в таргете и копируем.
        У нас нет функции. Создать.
 4.2 Для каждого вложенного каталога создаем список файлов, как целевой используем созданный в 4.1.
     И пушим этот объект в нашу очередь. Кажется, хорошо, если этим будет заниматься sw.
     
Таким образом, каждый экзепляр совершает действие "Получить список файлов во вложенных каталогах" ровно один раз.
При этом действии в очереди экземпляров создаются новые в том случае, если вложенные каталоги были и они были не пустыми.
Совершив действие экземпляр это запоминает.
Когда ему снова будет предоставлено слово, он начнет копировать.
Возможно, имеет смысл сделать два итератора, чтобы не ждать пока все файлы переберем.
 - Не надо, просто смотрим, нет ли уже экземпляра с законченным построением списка и отдаем его разово.
   Остальные пойдут по onFinish. Тут кажется подводные камни - но справимся с помощью isRun

  4.3 Когда экземпляру класса "дали слово", он проверяет, построен ли уже список файлов из его подкаталогов.
		Если нет, запускаем стройку. Обновляем тотальное количество файлов и тотальное количество байт.
  4.4 Когда экземпляру класса "дали слово", он проверяет, построен ли уже список файлов из его подкаталогов. 
		Если да, начинает копировать файлы и пустые каталоги. Это внешней командой cp. 
		Очередной файл передаётся прогресс-менеджеру, чтобы тот мог отображать прогресс.
		Запоминаем размер очередного копируемого файла.
		
  4.5 Прогресс-менеджер учитывает общее число скопированых байт и общее число нескопированых.
		Если копируемый прямо сейчас файл большой (с), учитывает размер копии.
		Не инкрементит число скопированных байт и число скопированных файлов размером копии! Просто в выводе показывает.
		
  4.6 По событию onFinish обнуляем размер копируемого файла, и само имя копируемого файла.
		Инкрементим число скопированных байт и число скопированных файлов.
		
		
5 Отдельный таймер обновляет отображением всех цифр и програее-бара, потом анимацмия и всё такое.
    

7 Ping-Pong менеджер не забыть (сейчас забит хреном).

8 SlotReader не забыть (сейчас забит хреном).
